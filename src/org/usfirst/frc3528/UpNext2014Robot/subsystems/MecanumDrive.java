// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3528.UpNext2014Robot.subsystems;
import org.usfirst.frc3528.UpNext2014Robot.RobotMap;
import org.usfirst.frc3528.UpNext2014Robot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc3528.UpNext2014Robot.Utils;


/**
 *
 */
public class MecanumDrive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar cANJaguar1 = RobotMap.mecanumDriveCANJaguar1; // front left   
    CANJaguar cANJaguar2 = RobotMap.mecanumDriveCANJaguar2; // back left
    CANJaguar cANJaguar3 = RobotMap.mecanumDriveCANJaguar3; // front righr
    CANJaguar cANJaguar4 = RobotMap.mecanumDriveCANJaguar4; // back right
    RobotDrive robotDrive41 = RobotMap.mecanumDriveRobotDrive41;
    Gyro gyro1 = RobotMap.mecanumDriveGyro1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public MecanumDrive() {
        
        //super();
        
        //setJagLocations();
        
        robotDrive41 = new RobotDrive(cANJaguar1,cANJaguar2,cANJaguar3,cANJaguar4);
        robotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        robotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);

        //initializeJag(cANJaguar1);
        //initializeJag(cANJaguar2);
        //initializeJag(cANJaguar3);
        //initializeJag(cANJaguar4);       
                
                
   }
    
    public void driveWithJoystick(double x, double y, double rotation, double gyroAngle) {
        robotDrive41.mecanumDrive_Cartesian(Utils.rampSpeed(x, RobotMap.SENSITIVITY), Utils.rampSpeed(y, RobotMap.SENSITIVITY), Utils.rampSpeed(-1 * rotation, RobotMap.SENSITIVITY), 0);
    

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
     }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
